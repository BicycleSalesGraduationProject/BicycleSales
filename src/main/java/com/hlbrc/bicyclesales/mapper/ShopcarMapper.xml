<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hlbrc.bicyclesales.mapper.IShopcarMapper">
  <resultMap id="BaseResultMap" type="com.hlbrc.bicyclesales.entity.Shopcar">
    <id column="shopCarId" jdbcType="INTEGER" property="shopcarid" />
    <result column="userId" jdbcType="INTEGER" property="userid" />
    <result column="bicycleId" jdbcType="INTEGER" property="bicycleid" />
    <result column="num" jdbcType="INTEGER" property="num" />
    <result column="total" jdbcType="DOUBLE" property="total" />
    <result column="createTime" jdbcType="TIMESTAMP" property="createtime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    shopCarId, userId, bicycleId, num, total, createTime
  </sql>
  <select id="selectByExample" parameterType="com.hlbrc.bicyclesales.entity.ShopcarExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from shopcar
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from shopcar
    where shopCarId = #{shopcarid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from shopcar
    where shopCarId = #{shopcarid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.hlbrc.bicyclesales.entity.ShopcarExample">
    delete from shopcar
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hlbrc.bicyclesales.entity.Shopcar">
    insert into shopcar (shopCarId, userId, bicycleId, 
      num, total, createTime
      )
    values (#{shopcarid,jdbcType=INTEGER}, #{userid,jdbcType=INTEGER}, #{bicycleid,jdbcType=INTEGER}, 
      #{num,jdbcType=INTEGER}, #{total,jdbcType=DOUBLE}, #{createtime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.hlbrc.bicyclesales.entity.Shopcar">
    insert into shopcar
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="shopcarid != null">
        shopCarId,
      </if>
      <if test="userid != null">
        userId,
      </if>
      <if test="bicycleid != null">
        bicycleId,
      </if>
      <if test="num != null">
        num,
      </if>
      <if test="total != null">
        total,
      </if>
      <if test="createtime != null">
        createTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="shopcarid != null">
        #{shopcarid,jdbcType=INTEGER},
      </if>
      <if test="userid != null">
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="bicycleid != null">
        #{bicycleid,jdbcType=INTEGER},
      </if>
      <if test="num != null">
        #{num,jdbcType=INTEGER},
      </if>
      <if test="total != null">
        #{total,jdbcType=DOUBLE},
      </if>
      <if test="createtime != null">
        #{createtime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hlbrc.bicyclesales.entity.ShopcarExample" resultType="java.lang.Long">
    select count(*) from shopcar
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update shopcar
    <set>
      <if test="record.shopcarid != null">
        shopCarId = #{record.shopcarid,jdbcType=INTEGER},
      </if>
      <if test="record.userid != null">
        userId = #{record.userid,jdbcType=INTEGER},
      </if>
      <if test="record.bicycleid != null">
        bicycleId = #{record.bicycleid,jdbcType=INTEGER},
      </if>
      <if test="record.num != null">
        num = #{record.num,jdbcType=INTEGER},
      </if>
      <if test="record.total != null">
        total = #{record.total,jdbcType=DOUBLE},
      </if>
      <if test="record.createtime != null">
        createTime = #{record.createtime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update shopcar
    set shopCarId = #{record.shopcarid,jdbcType=INTEGER},
      userId = #{record.userid,jdbcType=INTEGER},
      bicycleId = #{record.bicycleid,jdbcType=INTEGER},
      num = #{record.num,jdbcType=INTEGER},
      total = #{record.total,jdbcType=DOUBLE},
      createTime = #{record.createtime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hlbrc.bicyclesales.entity.Shopcar">
    update shopcar
    <set>
      <if test="userid != null">
        userId = #{userid,jdbcType=INTEGER},
      </if>
      <if test="bicycleid != null">
        bicycleId = #{bicycleid,jdbcType=INTEGER},
      </if>
      <if test="num != null">
        num = #{num,jdbcType=INTEGER},
      </if>
      <if test="total != null">
        total = #{total,jdbcType=DOUBLE},
      </if>
      <if test="createtime != null">
        createTime = #{createtime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where shopCarId = #{shopcarid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hlbrc.bicyclesales.entity.Shopcar">
    update shopcar
    set userId = #{userid,jdbcType=INTEGER},
      bicycleId = #{bicycleid,jdbcType=INTEGER},
      num = #{num,jdbcType=INTEGER},
      total = #{total,jdbcType=DOUBLE},
      createTime = #{createtime,jdbcType=TIMESTAMP}
    where shopCarId = #{shopcarid,jdbcType=INTEGER}
  </update>
</mapper>